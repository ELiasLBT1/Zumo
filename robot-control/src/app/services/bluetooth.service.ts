import { Injectable } from '@angular/core';
import { Platform } from '@ionic/angular/standalone';

declare var window: any;

@Injectable({
  providedIn: 'root'
})
export class BluetoothService {
  private isDeviceConnected = false;
  private bluetoothSerial: any = null;
  private isPluginReady = false;

  constructor(private platform: Platform) {
    this.initializeBluetoothSerial();
  }

  private initializeBluetoothSerial() {
    if (this.platform.is('capacitor') || this.platform.is('cordova')) {
      // Intentar inicializar inmediatamente
      this.checkBluetoothPlugin();

      // Esperar a deviceready para inicializaci√≥n segura
      document.addEventListener('deviceready', () => {
        console.log('üöÄ deviceready event fired, initializing Bluetooth plugin...');
        this.checkBluetoothPlugin();
        
        // Intentar asignar directamente despu√©s de deviceready
        if (!this.isPluginReady) {
          console.log('üîç Looking for Bluetooth plugin after deviceready...');
          
          if (window.cordova && window.cordova.plugins && window.cordova.plugins.bluetoothSerial) {
            this.bluetoothSerial = window.cordova.plugins.bluetoothSerial;
            this.isPluginReady = true;
            console.log('‚úÖ Found Bluetooth plugin in cordova.plugins namespace');
          } else if (window.BluetoothSerial) {
            this.bluetoothSerial = window.BluetoothSerial;
            this.isPluginReady = true;
            console.log('‚úÖ Found Bluetooth plugin in window.BluetoothSerial');
          }
        }
      }, false);
      
      // Verificar peri√≥dicamente con un intervalo m√°s corto
      const checkInterval = setInterval(() => {
        if (this.checkBluetoothPlugin()) {
          console.log('‚úÖ Bluetooth plugin found and initialized');
          clearInterval(checkInterval);
        }
      }, 300);
      
      // Detener despu√©s de 10 segundos para no consumir recursos
      setTimeout(() => {
        clearInterval(checkInterval);
        if (!this.isPluginReady) {
          console.warn('‚ö†Ô∏è Bluetooth plugin initialization timeout after 10 seconds');
        }
      }, 10000);
    }
  }

  private checkBluetoothPlugin(): boolean {
    try {
      if (window.cordova && window.cordova.plugins && window.cordova.plugins.bluetoothSerial) {
        this.bluetoothSerial = window.cordova.plugins.bluetoothSerial;
        this.isPluginReady = true;
        console.log('‚úÖ Bluetooth Serial plugin initialized successfully');
        return true;
      }
      
      if (window.BluetoothSerial) {
        this.bluetoothSerial = window.BluetoothSerial;
        this.isPluginReady = true;
        console.log('‚úÖ Bluetooth Serial plugin found in window.BluetoothSerial');
        return true;
      }
      
      console.log('‚è≥ Bluetooth plugin not ready yet...');
      return false;
    } catch (error) {
      console.error('‚ùå Error checking Bluetooth plugin:', error);
      return false;
    }
  }

  private isPluginAvailable(): boolean {
    return this.bluetoothSerial !== null && this.isPluginReady;
  }

  async isBluetoothEnabled(): Promise<boolean> {
    if (!this.platform.is('capacitor') && !this.platform.is('cordova')) {
      console.log('üñ•Ô∏è Mock: Bluetooth enabled (browser mode)');
      return true;
    }

    let attempts = 0;
    while (!this.isPluginAvailable() && attempts < 20) {
      console.log(`‚è≥ Waiting for Bluetooth plugin... attempt ${attempts + 1}`);
      await new Promise(resolve => setTimeout(resolve, 500));
      attempts++;
    }

    if (!this.isPluginAvailable()) {
      console.log('‚ùå Bluetooth plugin not available after waiting');
      return false; // No lanzar error, solo retornar false
    }

    return new Promise((resolve) => {
      try {
        this.bluetoothSerial.isEnabled(
          () => {
            console.log('‚úÖ Bluetooth is enabled');
            resolve(true);
          },
          (error: any) => {
            console.log('‚ùå Bluetooth is not enabled:', error);
            resolve(false);
          }
        );
      } catch (error) {
        console.error('‚ùå Error checking Bluetooth state:', error);
        resolve(false);
      }
    });
  }

  // M√©todo mejorado para obtener TODOS los dispositivos (emparejados y descubiertos)
  async scanAllDevices(): Promise<any[]> {
    if (!this.platform.is('capacitor') && !this.platform.is('cordova')) {
      console.log('üñ•Ô∏è Mock: Scanning all devices...');
      return [
        { 
          name: 'ZUMOE2', 
          address: '00:11:22:33:44:55',
          id: 'mock-device-1'
        }
      ];
    }

    if (!this.isPluginAvailable()) {
      throw new Error('Plugin de Bluetooth no disponible');
    }

    // Primero obtener dispositivos emparejados
    const pairedDevices = await this.getPairedDevices();
    
    // Luego buscar dispositivos disponibles
    const discoveredDevices = await this.discoverDevices();
    
    // Combinar ambas listas y eliminar duplicados
    const allDevices = [...pairedDevices, ...discoveredDevices];
    const uniqueDevices = allDevices.filter((device, index, self) => 
      index === self.findIndex(d => d.address === device.address)
    );
    
    console.log('üì± All available devices:', uniqueDevices);
    return uniqueDevices;
  }

  private async getPairedDevices(): Promise<any[]> {
    return new Promise((resolve, reject) => {
      console.log('üîç Getting paired devices...');
      
      this.bluetoothSerial.list(
        (devices: any[]) => {
          console.log('üì± Paired devices:', devices);
          const validDevices = devices.filter(device => 
            device && device.address && device.address.length > 0
          );
          resolve(validDevices);
        },
        (error: any) => {
          console.error('‚ùå Error getting paired devices:', error);
          resolve([]); // No fallar, solo retornar array vac√≠o
        }
      );
    });
  }

  private async discoverDevices(): Promise<any[]> {
    return new Promise((resolve) => {
      console.log('üîç Discovering new devices...');
      
      if (!this.bluetoothSerial.discoverUnpaired) {
        console.log('‚ö†Ô∏è Device discovery not available');
        resolve([]);
        return;
      }
      
      this.bluetoothSerial.discoverUnpaired(
        (devices: any[]) => {
          console.log('üì° Discovered devices:', devices);
          const validDevices = devices.filter(device => 
            device && device.address && device.address.length > 0
          );
          resolve(validDevices);
        },
        (error: any) => {
          console.error('‚ùå Error discovering devices:', error);
          resolve([]); // No fallar, solo retornar array vac√≠o
        }
      );
    });
  }

  // Mantener el m√©todo original para compatibilidad
  async scanDevices(): Promise<any[]> {
    return this.scanAllDevices();
  }

  // M√©todo de conexi√≥n mejorado que funciona como Serial Bluetooth Terminal
  async connect(deviceAddress: string): Promise<void> {
    if (!this.platform.is('capacitor') && !this.platform.is('cordova')) {
      console.log(`üñ•Ô∏è Mock: Connecting to ${deviceAddress}`);
      this.isDeviceConnected = true;
      return Promise.resolve();
    }

    // Solicitar permisos primero
    await this.requestPermissions();

    // Asegurar que el plugin est√© disponible
    if (!this.isPluginReady) {
      console.log('‚ö†Ô∏è Plugin not initialized yet, trying again...');
      this.bluetoothSerial = window.cordova?.plugins?.bluetoothSerial || window.BluetoothSerial;
      this.isPluginReady = !!this.bluetoothSerial;
      
      if (!this.isPluginReady) {
        // √öltimo intento con una espera
        await new Promise(resolve => setTimeout(resolve, 1000));
        this.bluetoothSerial = window.cordova?.plugins?.bluetoothSerial || window.BluetoothSerial;
        this.isPluginReady = !!this.bluetoothSerial;
      }
    }

    if (!this.isPluginReady || !this.bluetoothSerial) {
      throw new Error('No se pudo inicializar el plugin de Bluetooth. Intenta reiniciar la app.');
    }

    return new Promise((resolve, reject) => {
      console.log(`üîó Conectando a: ${deviceAddress} (modo inseguro)`);
      
      // Primero verificar si ya estamos conectados
      this.bluetoothSerial.isConnected(
        () => {
          console.log('‚ö†Ô∏è Ya est√° conectado, desconectando primero...');
          this.bluetoothSerial.disconnect(
            () => this.tryConnectInsecure(deviceAddress, resolve, reject),
            () => this.tryConnectInsecure(deviceAddress, resolve, reject)
          );
        },
        () => this.tryConnectInsecure(deviceAddress, resolve, reject)
      );
    });
  }
  
  // M√©todo separado para intentar conectar usando connectInsecure
  private tryConnectInsecure(deviceAddress: string, resolve: Function, reject: Function): void {
    console.log(`üîó Intentando connectInsecure a: ${deviceAddress}`);
    this.bluetoothSerial.connectInsecure(
      deviceAddress,
      () => {
        console.log('‚úÖ Conectado exitosamente con connectInsecure');
        this.isDeviceConnected = true;
        resolve();
      },
      (error: any) => {
        console.error('‚ùå Error de conexi√≥n con connectInsecure:', error);
        
        // Si falla, intentar con el m√©todo normal
        console.log('üîÑ Intentando m√©todo connect regular...');
        this.bluetoothSerial.connect(
          deviceAddress,
          () => {
            console.log('‚úÖ Conectado exitosamente con connect regular');
            this.isDeviceConnected = true;
            resolve();
          },
          (error2: any) => {
            console.error('‚ùå Error de conexi√≥n con ambos m√©todos:', error2);
            this.isDeviceConnected = false;
            reject(new Error('No se pudo conectar al dispositivo con ning√∫n m√©todo'));
          }
        );
      }
    );
  }

  // M√©todo para desconectar de forma limpia
  async disconnect(): Promise<void> {
    if (!this.platform.is('capacitor') && !this.platform.is('cordova')) {
      console.log('üñ•Ô∏è Mock: Disconnecting...');
      this.isDeviceConnected = false;
      return Promise.resolve();
    }

    if (!this.isPluginAvailable()) {
      this.isDeviceConnected = false;
      return Promise.resolve();
    }

    return new Promise((resolve) => {
      try {
        this.bluetoothSerial.disconnect(
          () => {
            console.log('‚úÖ Successfully disconnected');
            this.isDeviceConnected = false;
            resolve();
          },
          (error: any) => {
            console.log('‚ö†Ô∏è Disconnect error (ignoring):', error);
            this.isDeviceConnected = false;
            resolve(); // Resolver de todas formas
          }
        );
      } catch (error) {
        console.error('‚ùå Exception during disconnect:', error);
        this.isDeviceConnected = false;
        resolve();
      }
    });
  }

  async sendCommand(command: string): Promise<void> {
    if (!this.platform.is('capacitor') && !this.platform.is('cordova')) {
      console.log(`üñ•Ô∏è Mock: Sending command "${command}" to robot ZUMOE2`);
      return Promise.resolve();
    }

    if (!this.isPluginAvailable()) {
      throw new Error('Plugin de Bluetooth no disponible');
    }

    if (!this.isDeviceConnected) {
      throw new Error('Robot no conectado');
    }

    return new Promise((resolve, reject) => {
      console.log(`üì§ Sending command: ${command} to ZUMOE2`);
      
      try {
        // Enviar el comando exactamente como lo espera el ESP32
        this.bluetoothSerial.write(
          command,
          () => {
            console.log(`‚úÖ Command "${command}" sent successfully`);
            resolve();
          },
          (error: any) => {
            console.error('‚ùå Write error:', error);
            reject(new Error(`Error enviando comando: ${error}`));
          }
        );
      } catch (error) {
        console.error('‚ùå Exception sending command:', error);
        reject(new Error('Error en el env√≠o del comando'));
      }
    });
  }

  isConnected(): boolean {
    return this.isDeviceConnected;
  }

  getPluginStatus(): string {
    if (!this.platform.is('capacitor') && !this.platform.is('cordova')) {
      return 'Browser Mode (Mock)';
    }
    return this.isPluginAvailable() ? 'Plugin Ready ‚úÖ' : 'Plugin Not Ready ‚ùå';
  }

  // M√©todo para habilitar Bluetooth en el dispositivo
  async enableBluetooth(): Promise<boolean> {
    if (!this.platform.is('capacitor') && !this.platform.is('cordova')) {
      console.log('üñ•Ô∏è Mock: Enabling Bluetooth in browser mode');
      return Promise.resolve(true);
    }

    if (!this.isPluginAvailable()) {
      console.error('‚ùå Plugin not available for enabling Bluetooth');
      return Promise.reject(new Error('Plugin de Bluetooth no disponible'));
    }

    return new Promise((resolve, reject) => {
      try {
        this.bluetoothSerial.enable(
          () => {
            console.log('‚úÖ Bluetooth enabled successfully');
            resolve(true);
          },
          (error: any) => {
            console.error('‚ùå Error enabling Bluetooth:', error);
            reject(new Error('No se pudo habilitar el Bluetooth'));
          }
        );
      } catch (error) {
        console.error('‚ùå Exception enabling Bluetooth:', error);
        reject(new Error('Error habilitando Bluetooth'));
      }
    });
  }

  // M√©todo para solicitar permisos necesarios
  async requestPermissions(): Promise<boolean> {
    if (!this.platform.is('android')) return true;
    
    try {
      // For newer Capacitor versions, permissions are handled differently
      // We'll rely on the Bluetooth plugin itself to handle permissions
      console.log('üì¢ Permissions will be handled by the Bluetooth plugin');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error with permissions:', error);
      return false;
    }
  }
}